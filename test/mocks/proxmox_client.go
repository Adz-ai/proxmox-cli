// Code generated by MockGen. DO NOT EDIT.
// Source: proxmox-cli/internal/interfaces (interfaces: ProxmoxClientInterface,NodeInterface,ContainerInterface,VirtualMachineInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	interfaces "proxmox-cli/internal/interfaces"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proxmox "github.com/luthermonson/go-proxmox"
)

// MockProxmoxClientInterface is a mock of ProxmoxClientInterface interface.
type MockProxmoxClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProxmoxClientInterfaceMockRecorder
}

// MockProxmoxClientInterfaceMockRecorder is the mock recorder for MockProxmoxClientInterface.
type MockProxmoxClientInterfaceMockRecorder struct {
	mock *MockProxmoxClientInterface
}

// NewMockProxmoxClientInterface creates a new mock instance.
func NewMockProxmoxClientInterface(ctrl *gomock.Controller) *MockProxmoxClientInterface {
	mock := &MockProxmoxClientInterface{ctrl: ctrl}
	mock.recorder = &MockProxmoxClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxmoxClientInterface) EXPECT() *MockProxmoxClientInterfaceMockRecorder {
	return m.recorder
}

// Node mocks base method.
func (m *MockProxmoxClientInterface) Node(arg0 context.Context, arg1 string) (interfaces.NodeInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", arg0, arg1)
	ret0, _ := ret[0].(interfaces.NodeInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Node indicates an expected call of Node.
func (mr *MockProxmoxClientInterfaceMockRecorder) Node(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockProxmoxClientInterface)(nil).Node), arg0, arg1)
}

// Nodes mocks base method.
func (m *MockProxmoxClientInterface) Nodes(arg0 context.Context) (proxmox.NodeStatuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes", arg0)
	ret0, _ := ret[0].(proxmox.NodeStatuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Nodes indicates an expected call of Nodes.
func (mr *MockProxmoxClientInterfaceMockRecorder) Nodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockProxmoxClientInterface)(nil).Nodes), arg0)
}

// Version mocks base method.
func (m *MockProxmoxClientInterface) Version(arg0 context.Context) (*proxmox.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0)
	ret0, _ := ret[0].(*proxmox.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockProxmoxClientInterfaceMockRecorder) Version(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockProxmoxClientInterface)(nil).Version), arg0)
}

// MockNodeInterface is a mock of NodeInterface interface.
type MockNodeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNodeInterfaceMockRecorder
}

// MockNodeInterfaceMockRecorder is the mock recorder for MockNodeInterface.
type MockNodeInterfaceMockRecorder struct {
	mock *MockNodeInterface
}

// NewMockNodeInterface creates a new mock instance.
func NewMockNodeInterface(ctrl *gomock.Controller) *MockNodeInterface {
	mock := &MockNodeInterface{ctrl: ctrl}
	mock.recorder = &MockNodeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeInterface) EXPECT() *MockNodeInterfaceMockRecorder {
	return m.recorder
}

// Container mocks base method.
func (m *MockNodeInterface) Container(arg0 context.Context, arg1 int) (interfaces.ContainerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Container", arg0, arg1)
	ret0, _ := ret[0].(interfaces.ContainerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Container indicates an expected call of Container.
func (mr *MockNodeInterfaceMockRecorder) Container(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Container", reflect.TypeOf((*MockNodeInterface)(nil).Container), arg0, arg1)
}

// Containers mocks base method.
func (m *MockNodeInterface) Containers(arg0 context.Context) (proxmox.Containers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Containers", arg0)
	ret0, _ := ret[0].(proxmox.Containers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Containers indicates an expected call of Containers.
func (mr *MockNodeInterfaceMockRecorder) Containers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Containers", reflect.TypeOf((*MockNodeInterface)(nil).Containers), arg0)
}

// NewContainer mocks base method.
func (m *MockNodeInterface) NewContainer(arg0 context.Context, arg1 int, arg2 ...proxmox.ContainerOption) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewContainer", varargs...)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewContainer indicates an expected call of NewContainer.
func (mr *MockNodeInterfaceMockRecorder) NewContainer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContainer", reflect.TypeOf((*MockNodeInterface)(nil).NewContainer), varargs...)
}

// NewVirtualMachine mocks base method.
func (m *MockNodeInterface) NewVirtualMachine(arg0 context.Context, arg1 int, arg2 ...proxmox.VirtualMachineOption) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewVirtualMachine", varargs...)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewVirtualMachine indicates an expected call of NewVirtualMachine.
func (mr *MockNodeInterfaceMockRecorder) NewVirtualMachine(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVirtualMachine", reflect.TypeOf((*MockNodeInterface)(nil).NewVirtualMachine), varargs...)
}

// VirtualMachine mocks base method.
func (m *MockNodeInterface) VirtualMachine(arg0 context.Context, arg1 int) (interfaces.VirtualMachineInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(interfaces.VirtualMachineInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VirtualMachine indicates an expected call of VirtualMachine.
func (mr *MockNodeInterfaceMockRecorder) VirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachine", reflect.TypeOf((*MockNodeInterface)(nil).VirtualMachine), arg0, arg1)
}

// VirtualMachines mocks base method.
func (m *MockNodeInterface) VirtualMachines(arg0 context.Context) (proxmox.VirtualMachines, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachines", arg0)
	ret0, _ := ret[0].(proxmox.VirtualMachines)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VirtualMachines indicates an expected call of VirtualMachines.
func (mr *MockNodeInterfaceMockRecorder) VirtualMachines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachines", reflect.TypeOf((*MockNodeInterface)(nil).VirtualMachines), arg0)
}

// MockContainerInterface is a mock of ContainerInterface interface.
type MockContainerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContainerInterfaceMockRecorder
}

// MockContainerInterfaceMockRecorder is the mock recorder for MockContainerInterface.
type MockContainerInterfaceMockRecorder struct {
	mock *MockContainerInterface
}

// NewMockContainerInterface creates a new mock instance.
func NewMockContainerInterface(ctrl *gomock.Controller) *MockContainerInterface {
	mock := &MockContainerInterface{ctrl: ctrl}
	mock.recorder = &MockContainerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerInterface) EXPECT() *MockContainerInterfaceMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockContainerInterface) Clone(arg0 context.Context, arg1 *proxmox.ContainerCloneOptions) (int, *proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*proxmox.Task)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Clone indicates an expected call of Clone.
func (mr *MockContainerInterfaceMockRecorder) Clone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockContainerInterface)(nil).Clone), arg0, arg1)
}

// Delete mocks base method.
func (m *MockContainerInterface) Delete(arg0 context.Context) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockContainerInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContainerInterface)(nil).Delete), arg0)
}

// Reboot mocks base method.
func (m *MockContainerInterface) Reboot(arg0 context.Context) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reboot", arg0)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reboot indicates an expected call of Reboot.
func (mr *MockContainerInterfaceMockRecorder) Reboot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockContainerInterface)(nil).Reboot), arg0)
}

// Shutdown mocks base method.
func (m *MockContainerInterface) Shutdown(arg0 context.Context, arg1 bool, arg2 int) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0, arg1, arg2)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockContainerInterfaceMockRecorder) Shutdown(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockContainerInterface)(nil).Shutdown), arg0, arg1, arg2)
}

// Snapshots mocks base method.
func (m *MockContainerInterface) Snapshots(arg0 context.Context) ([]*proxmox.ContainerSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", arg0)
	ret0, _ := ret[0].([]*proxmox.ContainerSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshots indicates an expected call of Snapshots.
func (mr *MockContainerInterfaceMockRecorder) Snapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockContainerInterface)(nil).Snapshots), arg0)
}

// Start mocks base method.
func (m *MockContainerInterface) Start(arg0 context.Context) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockContainerInterfaceMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockContainerInterface)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockContainerInterface) Stop(arg0 context.Context) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockContainerInterfaceMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockContainerInterface)(nil).Stop), arg0)
}

// MockVirtualMachineInterface is a mock of VirtualMachineInterface interface.
type MockVirtualMachineInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineInterfaceMockRecorder
}

// MockVirtualMachineInterfaceMockRecorder is the mock recorder for MockVirtualMachineInterface.
type MockVirtualMachineInterfaceMockRecorder struct {
	mock *MockVirtualMachineInterface
}

// NewMockVirtualMachineInterface creates a new mock instance.
func NewMockVirtualMachineInterface(ctrl *gomock.Controller) *MockVirtualMachineInterface {
	mock := &MockVirtualMachineInterface{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineInterface) EXPECT() *MockVirtualMachineInterfaceMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockVirtualMachineInterface) Clone(arg0 context.Context, arg1 *proxmox.VirtualMachineCloneOptions) (int, *proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*proxmox.Task)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Clone indicates an expected call of Clone.
func (mr *MockVirtualMachineInterfaceMockRecorder) Clone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Clone), arg0, arg1)
}

// Delete mocks base method.
func (m *MockVirtualMachineInterface) Delete(arg0 context.Context) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Delete), arg0)
}

// Reboot mocks base method.
func (m *MockVirtualMachineInterface) Reboot(arg0 context.Context) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reboot", arg0)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reboot indicates an expected call of Reboot.
func (mr *MockVirtualMachineInterfaceMockRecorder) Reboot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Reboot), arg0)
}

// Shutdown mocks base method.
func (m *MockVirtualMachineInterface) Shutdown(arg0 context.Context) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockVirtualMachineInterfaceMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Shutdown), arg0)
}

// Start mocks base method.
func (m *MockVirtualMachineInterface) Start(arg0 context.Context) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockVirtualMachineInterfaceMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockVirtualMachineInterface) Stop(arg0 context.Context) (*proxmox.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(*proxmox.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockVirtualMachineInterfaceMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Stop), arg0)
}
